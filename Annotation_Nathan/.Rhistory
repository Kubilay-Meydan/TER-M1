sqrt(borne_inf)
sqrt(borne_sup)
sqrt(borne_inf)
sqrt(borne_sup)
sqrt(borne_inf)
sqrt(borne_sup)
sqrt(borne_inf)
sqrt(borne_sup)
borne_inf <-deg_lib * sd^2 / qchisq(1 - 0.1/2, deg_lib)
borne_sup <- deg_lib * sd^2 / qchisq(0.1/2, deg_lib)
sqrt(borne_inf)
sqrt(borne_sup)
borne_inf <-deg_lib * sd^2 / qchisq(1 - 0.05/2, deg_lib)
borne_sup <- deg_lib * sd^2 / qchisq(0.05/2, deg_lib)
sqrt(borne_inf)
sqrt(borne_sup)
borne_inf <-deg_lib * sd^2 / qchisq(1 - 0.05/2, deg_lib)
borne_sup <- deg_lib * sd^2 / qchisq(0.05/2, deg_lib)
quantilestudentinf = mean - qt(1-0.1/2, deg_lib) * sd/sqrt(length(data))
qt(1-0.1/2, deg_lib)
mean
quantilestudentinf = mean - qt(1-0.1/2, deg_lib) * sd/sqrt(length(data))
quantilestudentinf = mean - qt(1-0.1/2, deg_lib) * sd/sqrt(length(data))
mean  = mean(data)
uantilestudentinf = mean - qt(1-0.1/2, deg_lib) * sd/sqrt(length(data))
quantilestudentsup  = mean + qt(1-0.1/2, deg_lib) * sd/sqrt(length(data))
quantilestudentinf = mean - qt(1-0.1/2, deg_lib) * sd/sqrt(length(data))
quantilestudentsup  = mean + qt(1-0.1/2, deg_lib) * sd/sqrt(length(data))
borneinf = mean - qt(1-0.1/2, deg_lib) * sd/sqrt(length(data))
bornesup  = mean + qt(1-0.1/2, deg_lib) * sd/sqrt(length(data))
borneinf
bornesup
data <- c(75, 77, 78, 77, 77, 72, 72, 72,
70, 71, 69, 69, 68, 66, 64, 66,
62, 61.)
mean2 = mean(data2)
data2 <- c(75, 77, 78, 77, 77, 72, 72, 72,
70, 71, 69, 69, 68, 66, 64, 66,
62, 61.)
data2 <- c(75, 77, 78, 77, 77, 72, 72, 72,
70, 71, 69, 69, 68, 66, 64, 66,
62, 61.)
mean2 = mean(data2)
var2 = var(data2)
sd2 = sd(data2)
borneinf95 = mean2 - qt(1-0.05/2, deg_lib) * sd2/sqrt(length(data2))
bornesup95  = mean2 + qt(1-0.05/2, deg_lib) * sd2/sqrt(length(data2))
borneinf95
bornesup95
borneinf95 = mean2 - qt(1-0.05/2, deg_lib) * sd2/sqrt(length(data2))
bornesup95  = mean2 + qt(1-0.05/2, deg_lib) * sd2/sqrt(length(data2))
borneinf95
bornesup95
borneinf98 = mean2 - qt(1-0.02/2, deg_lib) * sd2/sqrt(length(data2))
bornesup98  = mean2 + qt(1-0.02/2, deg_lib) * sd2/sqrt(length(data2))
borneinf98
bornesup98
borneinf99 = mean2 - qt(1-0.01/2, deg_lib) * sd2/sqrt(length(data2))
bornesup99  = mean2 + qt(1-0.01/2, deg_lib) * sd2/sqrt(length(data2))
borneinf99
bornesup99
deg_lib2 = length(data2) - 1
deg_lib2 = length(data2) - 1
borneinf95 = mean2 - qt(1-0.05/2, deg_lib2) * sd2/sqrt(length(data2))
bornesup95  = mean2 + qt(1-0.05/2, deg_lib2) * sd2/sqrt(length(data2))
borneinf95
bornesup95
borneinf98 = mean2 - qt(1-0.02/2, deg_lib2) * sd2/sqrt(length(data2))
bornesup98  = mean2 + qt(1-0.02/2, deg_lib2) * sd2/sqrt(length(data2))
borneinf98
bornesup98
borneinf99 = mean2 - qt(1-0.01/2, deg_lib2) * sd2/sqrt(length(data2))
bornesup99  = mean2 + qt(1-0.01/2, deg_lib2) * sd2/sqrt(length(data2))
borneinf99
bornesup99
sd2 = sd(data2)
deg_lib2 = length(data2) - 1
borneinf95 = mean2 - qt(1-0.05/2, deg_lib2) * sd2/sqrt(length(data2))
bornesup95 = mean2 + qt(1-0.05/2, deg_lib2) * sd2/sqrt(length(data2))
borneinf95
bornesup95
borneinf98 = mean2 - qt(1-0.02/2, deg_lib2) * sd2/sqrt(length(data2))
bornesup98 = mean2 + qt(1-0.02/2, deg_lib2) * sd2/sqrt(length(data2))
borneinf98
bornesup98
borneinf99 = mean2 - qt(1-0.01/2, deg_lib2) * sd2/sqrt(length(data2))
bornesup99 = mean2 + qt(1-0.01/2, deg_lib2) * sd2/sqrt(length(data2))
borneinf99
bornesup99
varborne_inf95 <-deg_lib2 * var2 / qchisq(1 - 0.05/2, deg_lib2)
varborne_sup95 <- deg_lib2 * var2 / qchisq(0.05/2, deg_lib2)
varborneinf98 <-deg_lib2 * var2 / qchisq(1 - 0.02/2, deg_lib2)
varbornesup98 <- deg_lib2 * var2 / qchisq(0.02/2, deg_lib2)
varborneinf99 <-deg_lib2 * var2 / qchisq(1 - 0.01/2, deg_lib2)
varbornesup99 <- deg_lib2 * var2 / qchisq(0.01/2, deg_lib2)
varborneinf95
varborneinf95 <-deg_lib2 * var2 / qchisq(1 - 0.05/2, deg_lib2)
varbornesup95 <- deg_lib2 * var2 / qchisq(0.05/2, deg_lib2)
varborneinf95
varbornesup95
varborneinf98
varbornesup98
varborneinf99
varbornesup99
varconnueinf = mean2 - qnorm(1-0,05/2) * sqrt(26)/sqrt(length(data2))
varconnuesup = mean2 - qnorm(1-0,05/2) * sqrt(26)/sqrt(length(data2))
varconnuesup95
varconnuesup95
varconnueinf95 = mean2 - qnorm(1-0,05/2) * sqrt(26)/sqrt(length(data2))
varconnuesup95 = mean2 + qnorm(1-0,05/2) * sqrt(26)/sqrt(length(data2))
varconnueinf98 = mean2 - qnorm(1-0,02/2) * sqrt(26)/sqrt(length(data2))
varconnuesup98 = mean2 + qnorm(1-0,02/2) * sqrt(26)/sqrt(length(data2))
varconnueinf99 = mean2 - qnorm(1-0,01/2) * sqrt(26)/sqrt(length(data2))
varconnuesup99 = mean2 + qnorm(1-0,01/2) * sqrt(26)/sqrt(length(data2))
varconnuesup95
varconnueinf95
varconnuesup98
varconnueinf98
varconnuesup99
varconnueinf99
length(data2)
qnorm(1-0,05/2)
qnorm(1-0,05/2)
qnorm(1-0,05/2)
qnorm(1-0,05/2)
qnorm(1-0,05/2)
qnorm(1-0,05/2)
qnorm(1-0,05/2)
qnorm(1-0,05/2)
varconnueinf95 = mean2 - qnorm(1-0.05/2) * sqrt(26)/sqrt(length(data2))
varconnuesup95 = mean2 + qnorm(1-0.05/2) * sqrt(26)/sqrt(length(data2))
varconnueinf98 = mean2 - qnorm(1-0.02/2) * sqrt(26)/sqrt(length(data2))
varconnuesup98 = mean2 + qnorm(1-0.02/2) * sqrt(26)/sqrt(length(data2))
varconnueinf99 = mean2 - qnorm(1-0.01/2) * sqrt(26)/sqrt(length(data2))
varconnuesup99 = mean2 + qnorm(1-0.01/2) * sqrt(26)/sqrt(length(data2))
varconnuesup95
varconnueinf95
varconnuesup98
varconnueinf98
varconnuesup99
varconnueinf99
library(palmerpenguins)
install palmerpenguins
library(palmerpenguins)
#data(package = 'palmerpenguins')
head(penguins)
mean3 = mean(penguins$bill_length_mm)
deg_lib3 = length(penguins$bill_length_mm)
borneinf95 = mean3 - qt(1-0.05/2, deg_lib3) * sd3/sqrt(length(data3))
data3 = penguins$bill_length_mm
mean3 = mean(penguins$bill_length_mm)
sd3 = sd(penguins$bill_length_mm)
deg_lib3 = length(penguins$bill_length_mm)
borneinf95 = mean3 - qt(1-0.05/2, deg_lib3) * sd3/sqrt(length(data3))
bornesup95 = mean2 + qt(1-0.05/2, deg_lib2) * sd2/sqrt(length(data2))
borneinf95peng = mean3 - qt(1-0.05/2, deg_lib3) * sd3/sqrt(length(data3))
bornesup95peng = mean2 + qt(1-0.05/2, deg_lib2) * sd2/sqrt(length(data2))
borneinf95peng
bornesup95peng
deg_lib3 = length(penguins$bill_length_mm)
borneinf95peng = mean3 - qt(1-0.05/2, deg_lib3) * sd3/sqrt(length(data3))
borneinf95peng
bornesup95peng
sd3 = sd(penguins$bill_length_mm)
borneinf95peng = mean3 - qt(1-0.05/2, deg_lib3) * sd3/sqrt(length(data3))
bornesup95peng = mean2 + qt(1-0.05/2, deg_lib2) * sd3/sqrt(length(data2))
borneinf95peng
bornesup95peng
length(data3)
deg_lib3 = length(penguins$bill_length_mm)
qt(1-0.05/2, deg_lib3)
borneinf95peng = mean3 - qt(1-0.05/2, deg_lib3) * sd3/sqrt(length(data3))
bornesup95peng = mean3 + qt(1-0.05/2, deg_lib3) * sd3/sqrt(length(data3))
borneinf95peng
bornesup95peng
borneinf95peng = mean3 - qt(1-0.05/2, deg_lib3) * sd3/sqrt(length(data3))
bornesup95peng = mean3 + qt(1-0.05/2, deg_lib3) * sd3/sqrt(length(data3))
borneinf95peng
bornesup95peng
mean3 - qt(1-0.05/2, deg_lib3) * sd3/sqrt(length(data3))
mean3 - qt(1-0.05/2, deg_lib3) * sd3/sqrt(length(data3))
mean3
mean3
mean(penguins$bill_length_mm)
mean(penguins$bill_length_mm)
(penguins$bill_length_mm)
mean(penguins$bill_length_mm)
mean(penguins$bill_length_mm)
mean(penguins$bill_length_mm)
mean(penguins$bill_length_mm)
mean3 = mean(penguins$bill_length_mm, na.rm=TRUE)
mean3 = mean(penguins$bill_length_mm, na.rm=TRUE)
mean(penguins$bill_length_mm, na.rm=TRUE)
borneinf95peng = mean3 - qt(1-0.05/2, deg_lib3) * sd3/sqrt(length(data3))
bornesup95peng = mean3 + qt(1-0.05/2, deg_lib3) * sd3/sqrt(length(data3))
borneinf95peng
bornesup95peng
mean3
mean3
sd3 = sd(penguins$bill_length_mm)
sd(penguins$bill_length_mm)
sd3 = sd(penguins$bill_length_mm na.rm = TRUE)
data3 = penguins$bill_length_mm
mean3 = mean(penguins$bill_length_mm, na.rm=TRUE)
sd3 = sd(penguins$bill_length_mm, na.rm = TRUE)
deg_lib3 = length(penguins$bill_length_mm)
borneinf95peng = mean3 - qt(1-0.05/2, deg_lib3) * sd3/sqrt(length(data3))
bornesup95peng = mean3 + qt(1-0.05/2, deg_lib3) * sd3/sqrt(length(data3))
borneinf95peng
bornesup95peng
penguins$bill_length_mm, na.rm=TRUE
varborneinf95peng <-deg_lib3 * var3^2 / qchisq(1 - 0.05/2, deg_lib3)
varborneinf95peng <-deg_lib3 * var3^2 / qchisq(1 - 0.05/2, deg_lib3)
varborneinf95peng <-deg_lib3 * sd3^2 / qchisq(1 - 0.05/2, deg_lib3)
varbornesup95peng <- deg_lib3 * sd3^2 / qchisq(0.05/2, deg_lib3)
varborneinf95peng
varborneinf95peng
varbornesup95peng
varborneinf95 <-deg_lib2 * var2 / qchisq(1 - 0.05/2, deg_lib2)
varbornesup95 <- deg_lib2 * var2 / qchisq(0.05/2, deg_lib2)
varborneinf98 <-deg_lib2 * var2 / qchisq(1 - 0.02/2, deg_lib2)
varbornesup98 <- deg_lib2 * var2 / qchisq(0.02/2, deg_lib2)
varborneinf99 <-deg_lib2 * var2 / qchisq(1 - 0.01/2, deg_lib2)
varbornesup99 <- deg_lib2 * var2 / qchisq(0.01/2, deg_lib2)
varborneinf95
varbornesup95
varborneinf98
varbornesup98
varborneinf99
varbornesup99
varconnueinf95 = mean2 - qnorm(1-0.05/2) * sqrt(26)/sqrt(length(data2))
varconnuesup95 = mean2 + qnorm(1-0.05/2) * sqrt(26)/sqrt(length(data2))
varconnueinf98 = mean2 - qnorm(1-0.02/2) * sqrt(26)/sqrt(length(data2))
varconnuesup98 = mean2 + qnorm(1-0.02/2) * sqrt(26)/sqrt(length(data2))
varconnueinf99 = mean2 - qnorm(1-0.01/2) * sqrt(26)/sqrt(length(data2))
varconnuesup99 = mean2 + qnorm(1-0.01/2) * sqrt(26)/sqrt(length(data2))
varconnuesup95
varconnueinf95
varconnuesup98
varconnueinf98
varconnuesup99
varconnueinf99
borneinf95 = 0 - qt(1-0.05/2, 2) * 1/sqrt(3)
bornesup95peng = 0 + qt(1-0.05/2, 2) * 1/sqrt(3)
4borneinf95 = 0 - qt(1-0.05/2, 2) * 1/sqrt(3)
borneinf95exo4 = 0 - qt(1-0.05/2, 2) * 1/sqrt(3)
bornesup95exo4 = 0 + qt(1-0.05/2, 2) * 1/sqrt(3)
borneinf95exo4 = 0 - qt(1-0.05/2, 2) * 1/sqrt(3)
bornesup95exo4 = 0 + qt(1-0.05/2, 2) * 1/sqrt(3)
varconnueinf95exo4 = 0 - qnorm(1-0.05/2) * sd(c(1.65, 0.75, 1.17))/sqrt(3)
varconnuesup95exo4 = 0 + qnorm(1-0.05/2) * sd(c(1.65, 0.75, 1.17))/sqrt(3)
borneinf95exo4
bornesup95exo4
varconnueinf95exo4
varconnuesup95exo4
nb_sim <- 100
succes <- 0
for (i in 1:nb_sim) {
sample_data <- rnorm(n = 3, mean = 0, sd = 1)
sample_mean <- mean(sample_data)
sample_sd <- sd(sample_data)
IC_inf <- sample_mean - qt(1-0.05/2, 2) * sample_sd/sqrt(3)
IC_sup <- sample_mean + qt(1-0.05/2, 2) * sample_sd/sqrt(3)
if (IC_inf <= 0 && IC_sup >= 0) {
succes <- succes + 1
}
}
succes
nb_sim <- 100000
succes <- 0
for (i in 1:nb_sim) {
sample_data <- rnorm(n = 3, mean = 0, sd = 1)
sample_mean <- mean(sample_data)
sample_sd <- sd(sample_data)
IC_inf <- sample_mean - qt(1-0.05/2, 2) * sample_sd/sqrt(3)
IC_sup <- sample_mean + qt(1-0.05/2, 2) * sample_sd/sqrt(3)
if (IC_inf <= 0 && IC_sup >= 0) {
succes <- succes + 1
}
}
succes
succes/nb_sim
nb_sim <- 100000
succes <- 0
for (i in 1:nb_sim) {
sample_data <- rnorm(n = 3, mean = 0, sd = 1)
sample_mean <- mean(sample_data)
sample_sd <- sd(sample_data)
IC_inf <- sample_mean - qt(1-0.05/2, 2) * sample_sd/sqrt(3)
IC_sup <- sample_mean + qt(1-0.05/2, 2) * sample_sd/sqrt(3)
if (IC_inf <= 0 AND IC_sup >= 0) {
for (i in 1:nb_sim) {
sample_data <- rnorm(n = 3, mean = 0, sd = 1)
sample_mean <- mean(sample_data)
sample_sd <- sd(sample_data)
IC_inf <- sample_mean - qt(1-0.05/2, 2) * sample_sd/sqrt(3)
IC_sup <- sample_mean + qt(1-0.05/2, 2) * sample_sd/sqrt(3)
if (IC_inf <= 0 && IC_sup >= 0) {
succes <- succes + 1
}
}
succes/nb_sim
nb_sim <- 10000
succes <- 0
for (i in 1:nb_sim) {
sample_data <- rnorm(n = 3, mean = 0, sd = 1)
sample_mean <- mean(sample_data)
sample_sd <- sd(sample_data)
IC_inf <- sample_mean - qt(1-0.05/2, 2) * sample_sd/sqrt(3)
IC_sup <- sample_mean + qt(1-0.05/2, 2) * sample_sd/sqrt(3)
if (IC_inf <= 0 && IC_sup >= 0) {
succes <- succes + 1
}
}
succes/nb_sim
# Load necessary libraries
library(ggplot2)
library(reshape2)
# Read the CSV file
data <- read.csv("file_comparison_matrix.csv", row.names = 1)
Males  = c(120, 107, 110, 116, 114, 111, 113, 117, 114, 112)
Femelles = c(110, 111, 107, 108, 110, 105, 107, 106, 111, 111)
Mmales = mean(Males)
Mfemlles = mean(Femelles)
Males  = c(120, 107, 110, 116, 114, 111, 113, 117, 114, 112)
Femelles = c(110, 111, 107, 108, 110, 105, 107, 106, 111, 111)
Mmales = mean(Males)
Mfemlles = mean(Femelles)
VarMales = var(Males)
VarFemelles = var(Femelles)
VarMales / VarFemelles
qf(lenght(Males), lenght(Femelles))
qf(lenght(Males), length(Femelles))
qf(length(Males), length(Femelles))
VarMales / VarFemelles
qf(0, 95,length(Males) -1, length(Femelles) -1)
qf(0.95,length(Males) -1, length(Femelles) -1)
VarMales / VarFemelles
qf(0.95,length(Males) -1, length(Femelles) -1)
Var.test(VarMales, VarFemelles, 1)
var.test(VarMales, VarFemelles, 1)
var.test(Males, Femelles, 1)
VarMales / VarFemelles
t.test(Males, Femelles)
var.test(Males, Femelles, 1)
qf(0.95,length(Males) -1, length(Femelles) -1)
t.test(Males, Femelles)
2 * pt(-3.43)
2 * pt(-3.43, 9)
2 * pt(-3.43, 18)
t.test(Males, Femelles, alternative = less)
t.test(Males, Femelles, alternative = "less")
t.test(Males, Femelles, alternative = "greater")
t.test(Males, Femelles, alternative = "greater")
## install.packages("palmerpenguins")
library(palmerpenguins)
data("penguins")
str(penguins)
data <- penguins
data$bill_length_mm & data$sex == "male"
data[data$bill_length_mm & data$sex == "male"]
data[data$bill_length_mm & data$sex == "male"]
data[data$bill_length_mm & data$sex == "male",]
lenmale = data[data$bill_length_mm & data$sex == "male",]
lenfemale = data[data$bill_length_mm & data$sex == "female",]
mmale = mean(lenmale)
mfem = mean(lenfemale)
mmale = mean(lenmale, na.rm=TRUE)
mfem = mean(lenfemale, na.rm=TRUE)
lenmale = data[data$bill_length_mm & data$sex == "male", na.rm=TRUE,]
lenfemale = data[data$bill_length_mm & data$sex == "female", na.rm=TRUE,]
mmale = mean(lenmale, na.rm=TRUE)
mfem = mean(lenfemale, na.rm=TRUE)
lenmale = data[data$bill_length_mm & data$sex == "male", na.rm=TRUE,]
lenfemale = data[data$bill_length_mm & data$sex == "female", na.rm=TRUE,]
mmale = mean(lenmale, na.rm=TRUE)
mfem = mean(lenfemale, na.rm=TRUE)
lenmale = data[data$bill_length_mm & data$sex == "male", na.rm=TRUE,]
lenfemale = data[data$bill_length_mm & data$sex == "female", na.rm=TRUE,]
mmale = mean(lenmale, na.rm=TRUE)
mfem = mean(lenfemale, na.rm=TRUE)
lenmale = data[data$bill_length_mm & data$sex == "male", na.rm=TRUE,]
lenfemale = data[data$bill_length_mm & data$sex == "female", na.rm=TRUE,]
mmale = mean(lenmale, na.rm=TRUE)
mfem = mean(lenfemale, na.rm=TRUE)
lenfemale = data[data$bill_length_mm & data$sex == "female", na.rm=TRUE,]
lenmale = data[data$bill_length_mm & data$sex == "male", na.rm=TRUE,]
mmale = mean(lenmale, na.rm=TRUE)
mfem = mean(lenfemale, na.rm=TRUE)
lenmale
lenmale = data[data$sex == "male", na.rm=TRUE,]
lenmale
lenmale = data[data$sex == "male",]
lenmale
lenmale = data[data$sex == "male",]$bill_depth_mm
lenmale
mmale = mean(lenmale, na.rm=TRUE)
mmale
lenmale = data[data$sex == "male",]$bill_depth_mm
lenfemale = data[data$sex == "female", na.rm=TRUE,]$data$bill_length_mm
mmale = mean(lenmale, na.rm=TRUE)
mfem = mean(lenfemale, na.rm=TRUE)
lenmale = data[data$sex == "male",]$bill_depth_mm
lenfemale = data[data$sex == "female",]$data$bill_length_mm
lenmale = data[data$sex == "male",]$bill_depth_mm
lenfemale = data[data$sex == "female",]$bill_length_mm
mmale = mean(lenmale, na.rm=TRUE)
mfem = mean(lenfemale, na.rm=TRUE)
lenmale = data[data$sex == "male",]$bill_depth_mm
lenfemale = data[data$sex == "female",]$bill_length_mm
mmale = mean(lenmale, na.rm=TRUE)
mfem = mean(lenfemale, na.rm=TRUE)
VarMal = var(lenmale)
VarFem = var(lenfem)
lenmale = data[data$sex == "male",]$bill_depth_mm
lenfemale = data[data$sex == "female",]$bill_length_mm
mmale = mean(lenmale, na.rm=TRUE)
mfem = mean(lenfemale, na.rm=TRUE)
VarMal = var(lenmale)
VarFem = var(lenfemale)
VarMal / VarFem
qf(0.95,length(lenmale) -1, length(lenfemale) -1)
lenmale = data[data$sex == "male",]$bill_depth_mm
lenfemale = data[data$sex == "female",]$bill_length_mm
mmale = mean(lenmale, na.rm=TRUE)
mfem = mean(lenfemale, na.rm=TRUE)
VarMal = var(lenmale, na.rm = TRUE)
VarFem = var(lenfemale, na.rm = TRUE)
VarMal / VarFem
qf(0.95,length(lenmale) -1, length(lenfemale) -1)
var.test(Males, Femelles, 1)
var.test(Males, Femelles, "greater")
var.test(Males, Femelles, alternative = "greater")
t.test(Males, Femelles, alternative = "greater")
t.test(Males, Femelles, alternative = "greater")
t.test(lenmale, lenfemale, alternative = "greater")
t.test(mmale, mfem, alternative = "greater")
t.test(lenmale, lenfemale, alternative = "greater")
lenmale = data[data$sex == "male",]$bill_depth_mm
lenfemale = data[data$sex == "female",]$bill_length_mm
lenmale
t.test(lenmale, lenfemale, alternative = "greater")
qf(0.95,length(lenmale) -1, length(lenfemale) -1)
lenmale
lenfemale
qf(0.95,length(lenmale) -1, length(lenfemale) -1)
VarMal / VarFem
VarFem / VarMal
t.test(lenmale, lenfemale, alternative = "greater", var.equal = FALSE)
lenmale
mmale
mfem
VarMal
VarFem
VarFem
t.test(lenmale, lenfemale, var.equal = FALSE)
lenmale
lenfemale
setwd("~/Desktop/M1 Bibs/S1/TER/TER-M1/Annotation_Nathan")
library(ggplot2)
library(reshape2)
# Function to read CSV and convert to factor matrix
read_and_factorize <- function(file) {
data <- read.csv(file, row.names = 1)
return(apply(data, c(1, 2), factor, levels = c("D", "SS", "S", "VS", "I")))
}
# Read and process each CSV file
data1 <- read_and_factorize("QC.csv")
data2 <- read_and_factorize("trimming.csv")
data3 <- read_and_factorize("Quantification.csv")
data4 <- read_and_factorize("post_align.csv")
data5 <- read_and_factorize("mapping.csv")
data6 <- read_and_factorize("Norm.csv")
data7 <- read_and_factorize("Visuals.csv")
# Combine the row and column names from all matrices
all_rows <- unique(c(rownames(data1), rownames(data2), rownames(data3), rownames(data4), rownames(data5), rownames(data6), rownames(data7)))
all_cols <- unique(c(colnames(data1), colnames(data2), colnames(data3), colnames(data4), colnames(data5), colnames(data6), colnames(data7)))
# Create an empty matrix with combined dimensions
combined_matrix <- matrix("D", nrow = length(all_rows), ncol = length(all_cols),
dimnames = list(all_rows, all_cols))
# Function to fill the combined matrix
fill_matrix <- function(data, combined_matrix) {
for (row in rownames(data)) {
for (col in colnames(data)) {
combined_matrix[row, col] <- as.character(data[row, col])
}
}
return(combined_matrix)
}
# Fill the combined matrix with each data matrix
combined_matrix <- fill_matrix(data1, combined_matrix)
combined_matrix <- fill_matrix(data2, combined_matrix)
combined_matrix <- fill_matrix(data3, combined_matrix)
combined_matrix <- fill_matrix(data4, combined_matrix)
combined_matrix <- fill_matrix(data5, combined_matrix)
combined_matrix <- fill_matrix(data6, combined_matrix)
combined_matrix <- fill_matrix(data7, combined_matrix)
# Convert the combined matrix to a factor matrix
combined_matrix_factor <- apply(combined_matrix, c(1, 2), factor, levels = c("D", "SS", "S", "VS", "I"))
# Melt the matrix for ggplot
data_melted <- melt(as.matrix(combined_matrix_factor))
# Define colors for the similarity levels
colors <- c("D" = "cornflowerblue", "SS" = "lightblue", "S" = "cyan", "VS" = "aquamarine", "I" = "green")
# Create the heatmap
ggplot(data_melted, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_manual(values = colors, name = "Similarity Level", breaks = c("I", "VS", "S", "SS", "D")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
xlab("Column") +
ylab("Row") +
ggtitle("Heatmap of Combined Similarity Matrix")
