n <- 1   # Nombre d'observations par simulation
# Fonction pour générer une moyenne empirique d'une distribution N(0,1)
genere_moyenne <- function(n) {
echantillon <- rexp(n)
moyenne_empirique <- mean(echantillon, 1)
return(moyenne_empirique)
}
# Simulation des moyennes empiriques
set.seed(123)  # Pour la reproductibilité
moyennes_empiriques <- replicate(N, genere_moyenne(n))
# Création de l'histogramme
hist(moyennes_empiriques, breaks = 50, main = "Distribution des moyennes empiriques",
xlab = "Moyennes empiriques", ylab = "Fréquence", col = "blue", proba = TRUE)
# Optionnel : Ajouter une courbe normale pour comparaison
#curve(dnorm(x, mean = 0, sd = 1/sqrt(n)), add = TRUE, col = "red", lwd = 2)
N <- 10000  # Nombre de simulations
n <- 1   # Nombre d'observations par simulation
# Fonction pour générer une moyenne empirique d'une distribution N(0,1)
genere_moyenne <- function(n) {
echantillon <- rpois(n,0.5)
moyenne_empirique <- mean(echantillon, 1)
return(moyenne_empirique)
}
# Simulation des moyennes empiriques
set.seed(123)  # Pour la reproductibilité
moyennes_empiriques <- replicate(N, genere_moyenne(n))
# Création de l'histogramme
hist(moyennes_empiriques, breaks = 50, main = "Distribution des moyennes empiriques",
xlab = "Moyennes empiriques", ylab = "Fréquence", col = "blue", proba = TRUE)
# Paramètres de la simulation
N <- 10000  # Nombre de simulations
n <- 30   # Nombre d'observations par simulation
# Fonction pour générer une moyenne empirique d'une distribution N(0,1)
genere_moyenne <- function(n) {
echantillon <- rpois(n,0.5)
moyenne_empirique <- mean(echantillon, 1)
return(moyenne_empirique)
}
# Simulation des moyennes empiriques
set.seed(123)  # Pour la reproductibilité
moyennes_empiriques <- replicate(N, genere_moyenne(n))
# Création de l'histogramme
hist(moyennes_empiriques, breaks = 50, main = "Distribution des moyennes empiriques",
xlab = "Moyennes empiriques", ylab = "Fréquence", col = "blue", proba = TRUE)
# Optionnel : Ajouter une courbe normale pour comparaison
#curve(dnorm(x, mean = 0, sd = 1/sqrt(n)), add = TRUE, col = "red", lwd = 2)
ice 2
hist(rnorm(1000), prob= TRUE)
curve(dnorm(x), add = TRUE, col = "blue", freq = FALSE)
# Paramètres de la simulation
N <- 10000  # Nombre de simulations
n <- 30   # Nombre d'observations par simulation
# Fonction pour générer une moyenne empirique d'une distribution N(0,1)
genere_moyenne <- function(n) {
echantillon <- rpois(n, lambda = 0.5)
moyenne_empirique <- mean(echantillon, 1)
return(moyenne_empirique)
}
# Simulation des moyennes empiriques
set.seed(123)  # Pour la reproductibilité
moyennes_empiriques <- replicate(N, genere_moyenne(n))
# Création de l'histogramme
hist(moyennes_empiriques, breaks = 50, main = "Distribution des moyennes empiriques",
xlab = "Moyennes empiriques", ylab = "Fréquence", col = "blue", proba = TRUE)
hist(rnorm(1000), prob= TRUE)
curve(dnorm(x), add = TRUE, col = "blue", freq = FALSE)
# Paramètres de la simulation
N <- 10000  # Nombre de simulations
n <- 30   # Nombre d'observations par simulation
# Fonction pour générer une moyenne empirique d'une distribution N(0,1)
genere_moyenne <- function(n) {
echantillon <- rpois(n, lambda = 0.5)
moyenne_empirique <- mean(echantillon)
return(moyenne_empirique)
}
# Simulation des moyennes empiriques
set.seed(123)  # Pour la reproductibilité
moyennes_empiriques <- replicate(N, genere_moyenne(n))
# Création de l'histogramme
hist(moyennes_empiriques, breaks = 50, main = "Distribution des moyennes empiriques",
xlab = "Moyennes empiriques", ylab = "Fréquence", col = "blue", proba = TRUE)
# Optionnel : Ajouter une courbe normale pour comparaison
#curve(dnorm(x, mean = 0, sd = 1/sqrt(n)), add = TRUE, col = "red", lwd = 2)
# Paramètres de la simulation
N <- 10000  # Nombre de simulations
n <- 30   # Nombre d'observations par simulation
# Fonction pour générer une moyenne empirique d'une distribution N(0,1)
genere_moyenne <- function(n) {
echantillon <- rbinom(n, p=0.3, n=2)
moyenne_empirique <- mean(echantillon)
return(moyenne_empirique)
}
# Simulation des moyennes empiriques
set.seed(123)  # Pour la reproductibilité
moyennes_empiriques <- replicate(N, genere_moyenne(n))
# Création de l'histogramme
hist(moyennes_empiriques, breaks = 50, main = "Distribution des moyennes empiriques",
xlab = "Moyennes empiriques", ylab = "Fréquence", col = "blue", proba = TRUE)
# Optionnel : Ajouter une courbe normale pour comparaison
#curve(dnorm(x, mean = 0, sd = 1/sqrt(n)), add = TRUE, col = "red", lwd = 2)
N <- 10000  # Nombre de simulations
n <- 30   # Nombre d'observations par simulation
# Fonction pour générer une moyenne empirique d'une distribution N(0,1)
genere_moyenne <- function(n) {
echantillon <- rcauchy(n, p=0.3, n=2)
moyenne_empirique <- mean(echantillon)
return(moyenne_empirique)
}
# Simulation des moyennes empiriques
set.seed(123)  # Pour la reproductibilité
moyennes_empiriques <- replicate(N, genere_moyenne(n))
N <- 10000  # Nombre de simulations
n <- 30   # Nombre d'observations par simulation
# Fonction pour générer une moyenne empirique d'une distribution N(0,1)
genere_moyenne <- function(n) {
echantillon <- rcauchy(n)
moyenne_empirique <- mean(echantillon)
return(moyenne_empirique)
}
# Simulation des moyennes empiriques
set.seed(123)  # Pour la reproductibilité
moyennes_empiriques <- replicate(N, genere_moyenne(n))
# Création de l'histogramme
hist(moyennes_empiriques, breaks = 50, main = "Distribution des moyennes empiriques",
xlab = "Moyennes empiriques", ylab = "Fréquence", col = "blue", proba = TRUE)
# Optionnel : Ajouter une courbe normale pour comparaison
#curve(dnorm(x, mean = 0, sd = 1/sqrt(n)), add = TRUE, col = "red", lwd = 2)
data <- c(175, 176, 180, 182, 162, 172,
158, 174, 185, 177, 176, 184,
190, 169, 170, 167, 179, 173,
202, 152)
mean(data)
data <- c(175, 176, 180, 182, 162, 172,
158, 174, 185, 177, 176, 184,
190, 169, 170, 167, 179, 173,
202, 152)
mean(data)
sd(data)
t.test(data, conf.level = 0.9)
t.test(data, conf.level = 0.9)$conf.level
t.test(data, conf.level = 0.9)$conf.int
t.test(data, conf.level = 0.9)$conf.int
sd(data)^2
sd(data)^2
sd(data)^2
t.test(data, conf.level = 0.9)$conf.int
sd = sd(data)
sd^2
deg_lib = length(data) - 1
borne_inf <- (length(data) - 1) * sd^2 / qchisq(1 - 0.1/2, deg_lib)
borne_sup <- (length(data) - 1) * sd^2 / qchisq(0.1/2, deg_lib)
deg_lib = length(data) - 1
borne_inf <- (length(data) - 1) * sd^2 / qchisq(1 - 0.1/2, deg_lib)
borne_sup <- (length(data) - 1) * sd^2 / qchisq(0.1/2, deg_lib)
borne_inf
borne_sup
sqrt(borne_inf)
sqrt(borne_sup)
sqrt(borne_inf)
sqrt(borne_sup)
sqrt(borne_inf)
sqrt(borne_sup)
sqrt(borne_inf)
sqrt(borne_sup)
borne_inf <-deg_lib * sd^2 / qchisq(1 - 0.1/2, deg_lib)
borne_sup <- deg_lib * sd^2 / qchisq(0.1/2, deg_lib)
sqrt(borne_inf)
sqrt(borne_sup)
borne_inf <-deg_lib * sd^2 / qchisq(1 - 0.05/2, deg_lib)
borne_sup <- deg_lib * sd^2 / qchisq(0.05/2, deg_lib)
sqrt(borne_inf)
sqrt(borne_sup)
borne_inf <-deg_lib * sd^2 / qchisq(1 - 0.05/2, deg_lib)
borne_sup <- deg_lib * sd^2 / qchisq(0.05/2, deg_lib)
quantilestudentinf = mean - qt(1-0.1/2, deg_lib) * sd/sqrt(length(data))
qt(1-0.1/2, deg_lib)
mean
quantilestudentinf = mean - qt(1-0.1/2, deg_lib) * sd/sqrt(length(data))
quantilestudentinf = mean - qt(1-0.1/2, deg_lib) * sd/sqrt(length(data))
mean  = mean(data)
uantilestudentinf = mean - qt(1-0.1/2, deg_lib) * sd/sqrt(length(data))
quantilestudentsup  = mean + qt(1-0.1/2, deg_lib) * sd/sqrt(length(data))
quantilestudentinf = mean - qt(1-0.1/2, deg_lib) * sd/sqrt(length(data))
quantilestudentsup  = mean + qt(1-0.1/2, deg_lib) * sd/sqrt(length(data))
borneinf = mean - qt(1-0.1/2, deg_lib) * sd/sqrt(length(data))
bornesup  = mean + qt(1-0.1/2, deg_lib) * sd/sqrt(length(data))
borneinf
bornesup
data <- c(75, 77, 78, 77, 77, 72, 72, 72,
70, 71, 69, 69, 68, 66, 64, 66,
62, 61.)
mean2 = mean(data2)
data2 <- c(75, 77, 78, 77, 77, 72, 72, 72,
70, 71, 69, 69, 68, 66, 64, 66,
62, 61.)
data2 <- c(75, 77, 78, 77, 77, 72, 72, 72,
70, 71, 69, 69, 68, 66, 64, 66,
62, 61.)
mean2 = mean(data2)
var2 = var(data2)
sd2 = sd(data2)
borneinf95 = mean2 - qt(1-0.05/2, deg_lib) * sd2/sqrt(length(data2))
bornesup95  = mean2 + qt(1-0.05/2, deg_lib) * sd2/sqrt(length(data2))
borneinf95
bornesup95
borneinf95 = mean2 - qt(1-0.05/2, deg_lib) * sd2/sqrt(length(data2))
bornesup95  = mean2 + qt(1-0.05/2, deg_lib) * sd2/sqrt(length(data2))
borneinf95
bornesup95
borneinf98 = mean2 - qt(1-0.02/2, deg_lib) * sd2/sqrt(length(data2))
bornesup98  = mean2 + qt(1-0.02/2, deg_lib) * sd2/sqrt(length(data2))
borneinf98
bornesup98
borneinf99 = mean2 - qt(1-0.01/2, deg_lib) * sd2/sqrt(length(data2))
bornesup99  = mean2 + qt(1-0.01/2, deg_lib) * sd2/sqrt(length(data2))
borneinf99
bornesup99
deg_lib2 = length(data2) - 1
deg_lib2 = length(data2) - 1
borneinf95 = mean2 - qt(1-0.05/2, deg_lib2) * sd2/sqrt(length(data2))
bornesup95  = mean2 + qt(1-0.05/2, deg_lib2) * sd2/sqrt(length(data2))
borneinf95
bornesup95
borneinf98 = mean2 - qt(1-0.02/2, deg_lib2) * sd2/sqrt(length(data2))
bornesup98  = mean2 + qt(1-0.02/2, deg_lib2) * sd2/sqrt(length(data2))
borneinf98
bornesup98
borneinf99 = mean2 - qt(1-0.01/2, deg_lib2) * sd2/sqrt(length(data2))
bornesup99  = mean2 + qt(1-0.01/2, deg_lib2) * sd2/sqrt(length(data2))
borneinf99
bornesup99
sd2 = sd(data2)
deg_lib2 = length(data2) - 1
borneinf95 = mean2 - qt(1-0.05/2, deg_lib2) * sd2/sqrt(length(data2))
bornesup95 = mean2 + qt(1-0.05/2, deg_lib2) * sd2/sqrt(length(data2))
borneinf95
bornesup95
borneinf98 = mean2 - qt(1-0.02/2, deg_lib2) * sd2/sqrt(length(data2))
bornesup98 = mean2 + qt(1-0.02/2, deg_lib2) * sd2/sqrt(length(data2))
borneinf98
bornesup98
borneinf99 = mean2 - qt(1-0.01/2, deg_lib2) * sd2/sqrt(length(data2))
bornesup99 = mean2 + qt(1-0.01/2, deg_lib2) * sd2/sqrt(length(data2))
borneinf99
bornesup99
varborne_inf95 <-deg_lib2 * var2 / qchisq(1 - 0.05/2, deg_lib2)
varborne_sup95 <- deg_lib2 * var2 / qchisq(0.05/2, deg_lib2)
varborneinf98 <-deg_lib2 * var2 / qchisq(1 - 0.02/2, deg_lib2)
varbornesup98 <- deg_lib2 * var2 / qchisq(0.02/2, deg_lib2)
varborneinf99 <-deg_lib2 * var2 / qchisq(1 - 0.01/2, deg_lib2)
varbornesup99 <- deg_lib2 * var2 / qchisq(0.01/2, deg_lib2)
varborneinf95
varborneinf95 <-deg_lib2 * var2 / qchisq(1 - 0.05/2, deg_lib2)
varbornesup95 <- deg_lib2 * var2 / qchisq(0.05/2, deg_lib2)
varborneinf95
varbornesup95
varborneinf98
varbornesup98
varborneinf99
varbornesup99
varconnueinf = mean2 - qnorm(1-0,05/2) * sqrt(26)/sqrt(length(data2))
varconnuesup = mean2 - qnorm(1-0,05/2) * sqrt(26)/sqrt(length(data2))
varconnuesup95
varconnuesup95
varconnueinf95 = mean2 - qnorm(1-0,05/2) * sqrt(26)/sqrt(length(data2))
varconnuesup95 = mean2 + qnorm(1-0,05/2) * sqrt(26)/sqrt(length(data2))
varconnueinf98 = mean2 - qnorm(1-0,02/2) * sqrt(26)/sqrt(length(data2))
varconnuesup98 = mean2 + qnorm(1-0,02/2) * sqrt(26)/sqrt(length(data2))
varconnueinf99 = mean2 - qnorm(1-0,01/2) * sqrt(26)/sqrt(length(data2))
varconnuesup99 = mean2 + qnorm(1-0,01/2) * sqrt(26)/sqrt(length(data2))
varconnuesup95
varconnueinf95
varconnuesup98
varconnueinf98
varconnuesup99
varconnueinf99
length(data2)
qnorm(1-0,05/2)
qnorm(1-0,05/2)
qnorm(1-0,05/2)
qnorm(1-0,05/2)
qnorm(1-0,05/2)
qnorm(1-0,05/2)
qnorm(1-0,05/2)
qnorm(1-0,05/2)
varconnueinf95 = mean2 - qnorm(1-0.05/2) * sqrt(26)/sqrt(length(data2))
varconnuesup95 = mean2 + qnorm(1-0.05/2) * sqrt(26)/sqrt(length(data2))
varconnueinf98 = mean2 - qnorm(1-0.02/2) * sqrt(26)/sqrt(length(data2))
varconnuesup98 = mean2 + qnorm(1-0.02/2) * sqrt(26)/sqrt(length(data2))
varconnueinf99 = mean2 - qnorm(1-0.01/2) * sqrt(26)/sqrt(length(data2))
varconnuesup99 = mean2 + qnorm(1-0.01/2) * sqrt(26)/sqrt(length(data2))
varconnuesup95
varconnueinf95
varconnuesup98
varconnueinf98
varconnuesup99
varconnueinf99
library(palmerpenguins)
install palmerpenguins
library(palmerpenguins)
#data(package = 'palmerpenguins')
head(penguins)
mean3 = mean(penguins$bill_length_mm)
deg_lib3 = length(penguins$bill_length_mm)
borneinf95 = mean3 - qt(1-0.05/2, deg_lib3) * sd3/sqrt(length(data3))
data3 = penguins$bill_length_mm
mean3 = mean(penguins$bill_length_mm)
sd3 = sd(penguins$bill_length_mm)
deg_lib3 = length(penguins$bill_length_mm)
borneinf95 = mean3 - qt(1-0.05/2, deg_lib3) * sd3/sqrt(length(data3))
bornesup95 = mean2 + qt(1-0.05/2, deg_lib2) * sd2/sqrt(length(data2))
borneinf95peng = mean3 - qt(1-0.05/2, deg_lib3) * sd3/sqrt(length(data3))
bornesup95peng = mean2 + qt(1-0.05/2, deg_lib2) * sd2/sqrt(length(data2))
borneinf95peng
bornesup95peng
deg_lib3 = length(penguins$bill_length_mm)
borneinf95peng = mean3 - qt(1-0.05/2, deg_lib3) * sd3/sqrt(length(data3))
borneinf95peng
bornesup95peng
sd3 = sd(penguins$bill_length_mm)
borneinf95peng = mean3 - qt(1-0.05/2, deg_lib3) * sd3/sqrt(length(data3))
bornesup95peng = mean2 + qt(1-0.05/2, deg_lib2) * sd3/sqrt(length(data2))
borneinf95peng
bornesup95peng
length(data3)
deg_lib3 = length(penguins$bill_length_mm)
qt(1-0.05/2, deg_lib3)
borneinf95peng = mean3 - qt(1-0.05/2, deg_lib3) * sd3/sqrt(length(data3))
bornesup95peng = mean3 + qt(1-0.05/2, deg_lib3) * sd3/sqrt(length(data3))
borneinf95peng
bornesup95peng
borneinf95peng = mean3 - qt(1-0.05/2, deg_lib3) * sd3/sqrt(length(data3))
bornesup95peng = mean3 + qt(1-0.05/2, deg_lib3) * sd3/sqrt(length(data3))
borneinf95peng
bornesup95peng
mean3 - qt(1-0.05/2, deg_lib3) * sd3/sqrt(length(data3))
mean3 - qt(1-0.05/2, deg_lib3) * sd3/sqrt(length(data3))
mean3
mean3
mean(penguins$bill_length_mm)
mean(penguins$bill_length_mm)
(penguins$bill_length_mm)
mean(penguins$bill_length_mm)
mean(penguins$bill_length_mm)
mean(penguins$bill_length_mm)
mean(penguins$bill_length_mm)
mean3 = mean(penguins$bill_length_mm, na.rm=TRUE)
mean3 = mean(penguins$bill_length_mm, na.rm=TRUE)
mean(penguins$bill_length_mm, na.rm=TRUE)
borneinf95peng = mean3 - qt(1-0.05/2, deg_lib3) * sd3/sqrt(length(data3))
bornesup95peng = mean3 + qt(1-0.05/2, deg_lib3) * sd3/sqrt(length(data3))
borneinf95peng
bornesup95peng
mean3
mean3
sd3 = sd(penguins$bill_length_mm)
sd(penguins$bill_length_mm)
sd3 = sd(penguins$bill_length_mm na.rm = TRUE)
data3 = penguins$bill_length_mm
mean3 = mean(penguins$bill_length_mm, na.rm=TRUE)
sd3 = sd(penguins$bill_length_mm, na.rm = TRUE)
deg_lib3 = length(penguins$bill_length_mm)
borneinf95peng = mean3 - qt(1-0.05/2, deg_lib3) * sd3/sqrt(length(data3))
bornesup95peng = mean3 + qt(1-0.05/2, deg_lib3) * sd3/sqrt(length(data3))
borneinf95peng
bornesup95peng
penguins$bill_length_mm, na.rm=TRUE
varborneinf95peng <-deg_lib3 * var3^2 / qchisq(1 - 0.05/2, deg_lib3)
varborneinf95peng <-deg_lib3 * var3^2 / qchisq(1 - 0.05/2, deg_lib3)
varborneinf95peng <-deg_lib3 * sd3^2 / qchisq(1 - 0.05/2, deg_lib3)
varbornesup95peng <- deg_lib3 * sd3^2 / qchisq(0.05/2, deg_lib3)
varborneinf95peng
varborneinf95peng
varbornesup95peng
varborneinf95 <-deg_lib2 * var2 / qchisq(1 - 0.05/2, deg_lib2)
varbornesup95 <- deg_lib2 * var2 / qchisq(0.05/2, deg_lib2)
varborneinf98 <-deg_lib2 * var2 / qchisq(1 - 0.02/2, deg_lib2)
varbornesup98 <- deg_lib2 * var2 / qchisq(0.02/2, deg_lib2)
varborneinf99 <-deg_lib2 * var2 / qchisq(1 - 0.01/2, deg_lib2)
varbornesup99 <- deg_lib2 * var2 / qchisq(0.01/2, deg_lib2)
varborneinf95
varbornesup95
varborneinf98
varbornesup98
varborneinf99
varbornesup99
varconnueinf95 = mean2 - qnorm(1-0.05/2) * sqrt(26)/sqrt(length(data2))
varconnuesup95 = mean2 + qnorm(1-0.05/2) * sqrt(26)/sqrt(length(data2))
varconnueinf98 = mean2 - qnorm(1-0.02/2) * sqrt(26)/sqrt(length(data2))
varconnuesup98 = mean2 + qnorm(1-0.02/2) * sqrt(26)/sqrt(length(data2))
varconnueinf99 = mean2 - qnorm(1-0.01/2) * sqrt(26)/sqrt(length(data2))
varconnuesup99 = mean2 + qnorm(1-0.01/2) * sqrt(26)/sqrt(length(data2))
varconnuesup95
varconnueinf95
varconnuesup98
varconnueinf98
varconnuesup99
varconnueinf99
borneinf95 = 0 - qt(1-0.05/2, 2) * 1/sqrt(3)
bornesup95peng = 0 + qt(1-0.05/2, 2) * 1/sqrt(3)
4borneinf95 = 0 - qt(1-0.05/2, 2) * 1/sqrt(3)
borneinf95exo4 = 0 - qt(1-0.05/2, 2) * 1/sqrt(3)
bornesup95exo4 = 0 + qt(1-0.05/2, 2) * 1/sqrt(3)
borneinf95exo4 = 0 - qt(1-0.05/2, 2) * 1/sqrt(3)
bornesup95exo4 = 0 + qt(1-0.05/2, 2) * 1/sqrt(3)
varconnueinf95exo4 = 0 - qnorm(1-0.05/2) * sd(c(1.65, 0.75, 1.17))/sqrt(3)
varconnuesup95exo4 = 0 + qnorm(1-0.05/2) * sd(c(1.65, 0.75, 1.17))/sqrt(3)
borneinf95exo4
bornesup95exo4
varconnueinf95exo4
varconnuesup95exo4
nb_sim <- 100
succes <- 0
for (i in 1:nb_sim) {
sample_data <- rnorm(n = 3, mean = 0, sd = 1)
sample_mean <- mean(sample_data)
sample_sd <- sd(sample_data)
IC_inf <- sample_mean - qt(1-0.05/2, 2) * sample_sd/sqrt(3)
IC_sup <- sample_mean + qt(1-0.05/2, 2) * sample_sd/sqrt(3)
if (IC_inf <= 0 && IC_sup >= 0) {
succes <- succes + 1
}
}
succes
nb_sim <- 100000
succes <- 0
for (i in 1:nb_sim) {
sample_data <- rnorm(n = 3, mean = 0, sd = 1)
sample_mean <- mean(sample_data)
sample_sd <- sd(sample_data)
IC_inf <- sample_mean - qt(1-0.05/2, 2) * sample_sd/sqrt(3)
IC_sup <- sample_mean + qt(1-0.05/2, 2) * sample_sd/sqrt(3)
if (IC_inf <= 0 && IC_sup >= 0) {
succes <- succes + 1
}
}
succes
succes/nb_sim
nb_sim <- 100000
succes <- 0
for (i in 1:nb_sim) {
sample_data <- rnorm(n = 3, mean = 0, sd = 1)
sample_mean <- mean(sample_data)
sample_sd <- sd(sample_data)
IC_inf <- sample_mean - qt(1-0.05/2, 2) * sample_sd/sqrt(3)
IC_sup <- sample_mean + qt(1-0.05/2, 2) * sample_sd/sqrt(3)
if (IC_inf <= 0 AND IC_sup >= 0) {
for (i in 1:nb_sim) {
sample_data <- rnorm(n = 3, mean = 0, sd = 1)
sample_mean <- mean(sample_data)
sample_sd <- sd(sample_data)
IC_inf <- sample_mean - qt(1-0.05/2, 2) * sample_sd/sqrt(3)
IC_sup <- sample_mean + qt(1-0.05/2, 2) * sample_sd/sqrt(3)
if (IC_inf <= 0 && IC_sup >= 0) {
succes <- succes + 1
}
}
succes/nb_sim
nb_sim <- 10000
succes <- 0
for (i in 1:nb_sim) {
sample_data <- rnorm(n = 3, mean = 0, sd = 1)
sample_mean <- mean(sample_data)
sample_sd <- sd(sample_data)
IC_inf <- sample_mean - qt(1-0.05/2, 2) * sample_sd/sqrt(3)
IC_sup <- sample_mean + qt(1-0.05/2, 2) * sample_sd/sqrt(3)
if (IC_inf <= 0 && IC_sup >= 0) {
succes <- succes + 1
}
}
succes/nb_sim
# Load necessary libraries
library(ggplot2)
library(reshape2)
# Read the CSV file
data <- read.csv("file_comparison_matrix.csv", row.names = 1)
# Load necessary libraries
library(ggplot2)
library(reshape2)
# Read the CSV file
data <- read.csv("file_comparison_matrix.csv", row.names = 1)
# Load necessary libraries
library(ggplot2)
library(reshape2)
# Read the CSV file
data <- read.csv("file_comparison_matrix.csv", row.names = 1)
# Load necessary libraries
library(ggplot2)
library(reshape2)
# Read the CSV file
data <- read.csv("file_comparison_matrix.csv", row.names = 1)
setwd("~/Desktop/M1 Bibs/S1/TER/TER-M1/rules_for_comparison")
# Load necessary libraries
library(ggplot2)
library(reshape2)
# Read the CSV file
data <- read.csv("file_comparison_matrix.csv", row.names = 1)
# Convert similarity values to factors
data_factor <- apply(data, c(1,2), factor, levels = c("D", "SS", "S", "VS", "I"))
# Convert the matrix to a format suitable for ggplot
data_melted <- melt(as.matrix(data_factor))
# Define colors for the similarity levels
colors <- c("D" = "cornflowerblue", "SS" = "lightblue", "S" = "cyan", "VS" = "aquamarine", "I" = "green")
# Create the heatmap with labeled color scale
ggplot(data_melted, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_manual(values = colors, name = "Similarity Level", breaks = c("I", "VS", "S", "SS", "D")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
xlab("Column") +
ylab("Row") +
ggtitle("Heatmap of Similarity Matrix of the QC and Trimming Modules")
